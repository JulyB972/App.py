import dash
from dash import dcc, html
import plotly.graph_objs as go

# Donn√©es

enseigne_data = {
    "La Grande R√©cr√©": {
        "budget_reel": 350,
        "clics_reels": 6716,
        "poids_promo_2023": 56.77,
        "poids_promo_2024": 58.23
    },
    "Villaverde": {
        "budget_reel": 300,
        "clics_reels": 1267,
        "poids_promo_2023": 4.54,
        "poids_promo_2024": 4.50
    },
    "Sport 2000": {
        "budget_reel": 150,
        "clics_reels": 2236,
        "poids_promo_2023": None,
        "poids_promo_2024": 12.86
    }
}

# App Dash

app = dash.Dash(__name__)
app.title = "Simulateur Budget & Poids Promo"

app.layout = html.Div([
    html.H1("üìä Simulateur : Budget publicitaire & Poids promotionnel", style={"textAlign": "center"}),

    html.Label("Choisissez un budget (‚Ç¨) :", style={"fontWeight": "bold"}),
    dcc.Slider(
        id='budget-slider',
        min=50,
        max=700,
        step=50,
        value=350,
        marks={i: f"{i}‚Ç¨" for i in range(50, 701, 50)},
    ),
    html.Br(),

    html.H2("1Ô∏è‚É£ Estimation des clics par enseigne"),
    dcc.Graph(id='graph-clics'),

    html.H2("2Ô∏è‚É£ Impact pr√©visionnel estim√© sur le poids promotionnel (%)"),
    dcc.Graph(id='graph-poids-promo')
])

@app.callback(
    dash.dependencies.Output('graph-clics', 'figure'),
    dash.dependencies.Output('graph-poids-promo', 'figure'),
    dash.dependencies.Input('budget-slider', 'value')
)
def update_graphs(selected_budget):
    # --------- Graphique 1 : Clics ---------
    fig_clics = go.Figure()
    budgets = list(range(50, 701, 10))  # Pour la courbe

    for nom, data in enseigne_data.items():
        budget_reel = data["budget_reel"]
        clics_reels = data["clics_reels"]

        # Courbe estim√©e : r√®gle de 3
        clics_estimes = [round((b / budget_reel) * clics_reels) for b in budgets]

        fig_clics.add_trace(go.Scatter(
            x=budgets,
            y=clics_estimes,
            mode='lines',
            name=f"{nom} (estim√©)",
            line=dict(width=2)
        ))

        # Point r√©el
        fig_clics.add_trace(go.Scatter(
            x=[budget_reel],
            y=[clics_reels],
            mode='markers+text',
            name=f"{nom} (r√©el 2024)",
            marker=dict(size=10, color="gray", symbol="x"),
            text=[f"{clics_reels} clics"],
            textposition="bottom center"
        ))

        # Point estim√© au budget s√©lectionn√©
        clics_selected = round((selected_budget / budget_reel) * clics_reels)
        fig_clics.add_trace(go.Scatter(
            x=[selected_budget],
            y=[clics_selected],
            mode='markers',
            name=f"{nom} ({selected_budget}‚Ç¨)",
            marker=dict(size=8, symbol="circle")
        ))

    fig_clics.update_layout(
        title="üìà Nombre de clics estim√©s et r√©els par enseigne",
        xaxis_title="Budget publicitaire (‚Ç¨)",
        yaxis_title="Nombre de clics",
        legend_title="Type de donn√©e"
    )

    # --------- Graphique 2 : Poids promo ---------
    fig_promo = go.Figure()
    for nom, data in enseigne_data.items():
        budget_reel = data["budget_reel"]
        clics_reels = data["clics_reels"]
        poids_initial = data["poids_promo_2024"]

        clics_estimes = (selected_budget / budget_reel) * clics_reels
        delta = (clics_estimes / 10000) * 0.36  # Hypoth√®se
        poids_estime = round(poids_initial + delta, 2)

        fig_promo.add_trace(go.Bar(
            x=[nom],
            y=[poids_estime],
            name=f"{nom} (estim√©)",
            text=[f"{poids_estime}%"],
            textposition="auto"
        ))

    fig_promo.update_layout(
        title="üìä Poids promotionnel estim√© selon les clics",
        yaxis_title="Poids promotion estim√© (%)",
        xaxis_title="Enseignes du groupe PHI"
    )

    return fig_clics, fig_promo

if __name__ == '__main__':
    app.run_server(debug=True)
